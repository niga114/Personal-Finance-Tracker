class Popper {
    constructor(reference, popper, options = {}) {
        this.reference = reference;
        this.popper = popper;
        this.options = {
            placement: options.placement || 'bottom', // Default placement
            offset: options.offset || 10, // Distance between reference and popper
        };
        this.init();
    }

    init() {
        this.updatePosition();
        window.addEventListener('resize', () => this.updatePosition());
        window.addEventListener('scroll', () => this.updatePosition(), true);
    }

    updatePosition() {
        const refRect = this.reference.getBoundingClientRect();
        const popRect = this.popper.getBoundingClientRect();

        let top, left;

        switch (this.options.placement) {
            case 'top':
                top = refRect.top - popRect.height - this.options.offset;
                left = refRect.left + (refRect.width - popRect.width) / 2;
                break;
            case 'bottom':
                top = refRect.bottom + this.options.offset;
                left = refRect.left + (refRect.width - popRect.width) / 2;
                break;
            case 'left':
                top = refRect.top + (refRect.height - popRect.height) / 2;
                left = refRect.left - popRect.width - this.options.offset;
                break;
            case 'right':
                top = refRect.top + (refRect.height - popRect.height) / 2;
                left = refRect.right + this.options.offset;
                break;
            default:
                top = refRect.bottom + this.options.offset;
                left = refRect.left + (refRect.width - popRect.width) / 2;
        }

        this.popper.style.position = 'absolute';
        this.popper.style.top = `${top}px`;
        this.popper.style.left = `${left}px`;
    }

    destroy() {
        window.removeEventListener('resize', this.updatePosition);
        window.removeEventListener('scroll', this.updatePosition, true);
    }
}
